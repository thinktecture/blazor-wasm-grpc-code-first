@page "/time"

@using Grpc.Core
@using Grpc.Net.Client
@using ProtoBuf.Grpc.Client;
@using ProtoBuf.Grpc;
@using System.Threading
@using GrpcCodeFirst.Shared.Interfaces

@inject GrpcChannel _channel

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Time from Server</MudText>
    <MudText Typo="Typo.h5">@_currentTimeFromServer</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="StartTime" Disabled="@(_cts != null)">Start</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="StopTime" Disabled="@(_cts == null)">Stop</MudButton>
</MudContainer>

@code {
    private DateTime _currentTimeFromServer;
    private CancellationTokenSource _cts;

    private async Task StartTime()
    {
        var clock = _channel.CreateGrpcService<ITimeService>();
        _cts = new CancellationTokenSource();
        var options = new CallOptions(cancellationToken: _cts.Token);

        Console.WriteLine($"Current local time: {DateTime.UtcNow}");

        try
        {
            await foreach (var time in clock.SubscribeAsync(new CallContext(options)))
            {
                _currentTimeFromServer = time.Time;
                StateHasChanged();
                Console.WriteLine($"Time from server: {time.Time}");
            }
        }
        catch (RpcException) { }
        catch (OperationCanceledException) { }
    }

    private void StopTime()
    {
        _cts?.Cancel();
        _cts = null;
    }
}
